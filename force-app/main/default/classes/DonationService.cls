/*
    Copyright (c) 2021 Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2021
* @description Donation History Service class in NPSP.
*/
public with sharing class DonationHistoryService {

  static final String HARD_CREDIT = 'Hard Credit';
  static final String SOFT_CREDIT = 'Soft Credit';
  static final String PARTIAL_SOFT_CREDIT = 'Partial Soft Credit';
  
  /** 
  * @author Salesforce.org
  * @date 2021
  * @description method to return Donation History list.
  */
  public List<DonationHistoryController.DonationHistory> getDonationHistory(Id contactId){
      List<OpportunityContactRole> donations = [SELECT Id, Opportunity.Name, Opportunity.CloseDate, Opportunity.Amount, Contact.Email, Contact.Name, Role, isPrimary 
                                                  FROM OpportunityContactRole 
                                                  WHERE Opportunity.IsWon = true 
                                                  AND ContactId =:contactId 
                                                  ORDER BY Opportunity.CloseDate 
                                                  DESC LIMIT 2000];
      List<DonationHistoryController.DonationHistory> result = verifyCreditCondition(donations);
      return result;
  }

  /** 
  * @author Salesforce.org
  * @date 2021
  * @description method to return total number of record
  */
  public static List<AggregateResult> getTotalRecords(Id contactId){
      List<AggregateResult> totalRecords = [SELECT COUNT(Id)
                              FROM OpportunityContactRole 
                              WHERE Opportunity.IsWon = true 
                              AND ContactId =:contactId];
      return totalRecords;
  }

  /** 
  * @author Salesforce.org
  * @date 2021
  * @description Verify each condition to list Donation.
  */
  private static List<DonationHistoryController.DonationHistory> verifyCreditCondition(List<OpportunityContactRole> donations){
      List<DonationHistoryController.DonationHistory> donationHistory = new List<DonationHistoryController.DonationHistory>();
      List<DonationHistoryController.DonationHistory> hardCredit = verifyHardCreditCondition(donations);
      List<DonationHistoryController.DonationHistory> softCredit = verifySoftCreditCondition(donations);
      List<Id> donationsId = filterVerifiedIds(softCredit);
      List<DonationHistoryController.DonationHistory> partialSoftCredit = verifyPartialSoftCreditCondition(donationsId, donations);
      List<DonationHistoryController.DonationHistory> partialAndSoftCredit = verifyPartialAndSoftCreditCondition(softCredit, partialSoftCredit);
      
      donationHistory.addAll(hardCredit);
      List<DonationHistoryController.DonationHistory> partialAndSoftCreditAfterAmountChange = changeAmountFieldForPartialSoftCredits(partialAndSoftCredit);
      donationHistory.addAll(partialAndSoftCreditAfterAmountChange);
  
      return donationHistory;
  }
  
  private static List<DonationHistoryController.DonationHistory> changeAmountFieldForPartialSoftCredits(List<DonationHistoryController.DonationHistory> partialAndSoftCredit){
    List<DonationHistoryController.DonationHistory> partialListWithModifiedAmount = new List<DonationHistoryController.DonationHistory>();
    List<Id> partialSoftCreditIds = new List<Id>();
    for(DonationHistoryController.DonationHistory ocr: partialAndSoftCredit){
      if(ocr.creditType == PARTIAL_SOFT_CREDIT){
        partialSoftCreditIds.add(ocr.Id);
      }
    }
    List<Partial_Soft_Credit__c> partialSoftCredit = [SELECT id, Amount__c, Contact_Role_ID__c FROM Partial_Soft_Credit__c WHERE Contact_Role_ID__c IN :partialSoftCreditIds];
    for(DonationHistoryController.DonationHistory ocr: partialAndSoftCredit){
      if(ocr.creditType == PARTIAL_SOFT_CREDIT){
        for(Partial_Soft_Credit__c psc: partialSoftCredit){
          if(ocr.Id == psc.Contact_Role_ID__c){
            ocr.Amount = psc.Amount__c;
          }
        }        
      }
    }
    return partialListWithModifiedAmount;
  }

  /** 
  * @author Salesforce.org
  * @date 2021
  * @description Verify hard credit condition.
  */
  private static List<DonationHistoryController.DonationHistory> verifyHardCreditCondition(List<OpportunityContactRole> donations){
      List<DonationHistoryController.DonationHistory> hardCreditList = new List<DonationHistoryController.DonationHistory>();
      for(OpportunityContactRole ocr: donations){
          if (ocr.isPrimary) {
              DonationHistoryController.DonationHistory hardCredit = new DonationHistoryController.DonationHistory(ocr, HARD_CREDIT);
              hardCreditList.add(hardCredit);
          }
      }
      return hardCreditList;
  }
  
  /** 
  * @author Salesforce.org
  * @date 2021
  * @description Verify soft credit condition.
  */
  private static List<DonationHistoryController.DonationHistory> verifySoftCreditCondition(List<OpportunityContactRole> donations){
      //with the list of donations verify if the Role match the filter rule value on the NPSP_ClosedWon_Opps_SC filter group
      Filter_Rule__mdt roles = [SELECT Constant__c FROM Filter_Rule__mdt WHERE QualifiedApiName = 'NPSP_OppsSoftCreditRoles'];
      List<String> softCreditRoles = roles.Constant__c.split(';');
      List<DonationHistoryController.DonationHistory> softCreditList = new List<DonationHistoryController.DonationHistory>();
      for(OpportunityContactRole ocr: donations){
          if (softCreditRoles.contains(ocr.Role) && ocr.isPrimary==false) {
              DonationHistoryController.DonationHistory softCredit = new DonationHistoryController.DonationHistory(ocr, SOFT_CREDIT);
              softCreditList.add(softCredit);
          }
      }
      return softCreditList;
  }

  /** 
  * @author Salesforce.org
  * @date 2021
  * @description Filter for ids already classified as Soft Credit.
  */
  private static List<Id> filterVerifiedIds(List<DonationHistoryController.DonationHistory> softCredit){
      List<Id> donationsId = new List<Id>();
      for(DonationHistoryController.DonationHistory dh: softCredit){
          donationsId.add(dh.id);
      }
      return donationsId;
  }

  /** 
  * @author Salesforce.org
  * @date 2021
  * @description Verify partial soft credit condition.
  */
  private static List<DonationHistoryController.DonationHistory> verifyPartialSoftCreditCondition(List<Id> donationsId, List<OpportunityContactRole> donations){
      //search on PartialSoftCredit object for ids filtered before usin IN()
      //only ids with not type of credit defined before
      List<Id> partialSoftCreditIds = new List<Id>();
      List<Partial_Soft_Credit__c> partialSoftCredit = [SELECT id, Amount__c, Contact_Role_ID__c FROM Partial_Soft_Credit__c WHERE Contact_Role_ID__c IN :donationsId];
      for(Partial_Soft_Credit__c ps: partialSoftCredit){
          partialSoftCreditIds.add(ps.Contact_Role_ID__c);
      }
      List<DonationHistoryController.DonationHistory> partialSoftCreditList = new List<DonationHistoryController.DonationHistory>();
      for(OpportunityContactRole ocr: donations){
          if (partialSoftCreditIds.contains(ocr.id)) {
              DonationHistoryController.DonationHistory newPartialSoftCredit = new DonationHistoryController.DonationHistory(ocr, PARTIAL_SOFT_CREDIT);
              partialSoftCreditList.add(newPartialSoftCredit);
          }
      }
      return partialSoftCreditList;
  }

  /** 
  * @author Salesforce.org
  * @date 2021
  * @description Method to avoid duplicated records for Soft and Partial Soft credits.
  */
  private static List<DonationHistoryController.DonationHistory> verifyPartialAndSoftCreditCondition(List<DonationHistoryController.DonationHistory> soft, List<DonationHistoryController.DonationHistory> partialSoft){
    List<Id> partialSoftCreditIds = filterVerifiedIds(partialSoft);
    List<DonationHistoryController.DonationHistory> partialAndSoftCredit = new List<DonationHistoryController.DonationHistory>();
    for(DonationHistoryController.DonationHistory ocr: soft){
      if (!partialSoftCreditIds.contains(ocr.id)) {
        partialAndSoftCredit.add(ocr);
      }
    }
    partialAndSoftCredit.addAll(partialSoft);
    return partialAndSoftCredit;
  }
}